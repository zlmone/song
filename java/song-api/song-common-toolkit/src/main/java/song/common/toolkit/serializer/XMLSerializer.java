package song.common.toolkit.serializer;import song.common.io.ReaderHelper;import song.common.io.WriterHelper;import song.common.reflect.ClassHelper;import song.common.toolkit.xml.XMLHelper;import song.common.ui.TagNode;import javax.xml.bind.JAXBContext;import javax.xml.bind.JAXBException;import javax.xml.bind.Marshaller;import javax.xml.bind.Unmarshaller;import java.io.StringReader;import java.io.StringWriter;import java.util.ArrayList;import java.util.List;/** * description: * author:          song * createDate:      2017/10/19 */public class XMLSerializer implements IDataSerializer {    public String toString(Object object) {        // 创建输出流        StringWriter sw = null;        try {            sw = new StringWriter();            JAXBContext context = JAXBContext.newInstance(object.getClass());            Marshaller marshaller = context.createMarshaller();            // 格式化xml输出的格式            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,                    Boolean.TRUE);            // 将对象转换成输出流形式的xml            marshaller.marshal(object, sw);            String s = sw.toString();            return s;        } catch (JAXBException e) {            e.printStackTrace();        } finally {            WriterHelper.close(sw);        }        return null;    }    public <T> T parseObject(String s, Class<T> tClass) {        StringReader sr = null;        try {            sr = new StringReader(s);            JAXBContext context = JAXBContext.newInstance(tClass);            // 进行将Xml转成对象的核心接口            Unmarshaller unmarshaller = context.createUnmarshaller();            Object object = unmarshaller.unmarshal(sr);            return (T) object;        } catch (JAXBException e) {            e.printStackTrace();        } finally {            ReaderHelper.close(sr);        }        return null;    }    public <T> List<T> parseArray(String s, Class<T> tClass) {        try {            List<T> list = new ArrayList<T>();            TagNode root = XMLHelper.parseTagNode(XMLHelper.parseDocument(s));            if (root != null) {                for (TagNode tagNode : root.getChildNodes()) {                    list.add(ClassHelper.newInstance(tClass, tagNode.getChildNodes()));                }            }            return list;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }}