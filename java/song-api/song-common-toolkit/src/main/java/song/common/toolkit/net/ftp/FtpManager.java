package song.common.toolkit.net.ftp;import org.apache.commons.net.ftp.FTPClient;import org.apache.commons.net.ftp.FTPFile;import org.apache.commons.net.ftp.FTPReply;import song.common.io.StreamHelper;import song.common.lang.CharsetHelper;import song.common.net.ServerConnection;import java.io.*;/** * description: * author:          song * createDate:      2018/5/30 */public class FtpManager extends ServerConnection {    private FTPClient ftpClient = null;    public FtpManager() {    }    public FtpManager(String server, int port, String userName, String password) {        super(server,port,userName,password);    }    public FtpManager(FTPClient ftpClient) {        this.ftpClient = ftpClient;    }    public FTPClient getFtpClient() {        return ftpClient;    }    public FtpManager(ServerConnection serverConfig) {        super(serverConfig.getServer(),serverConfig.getPort(),serverConfig.getUserName(),serverConfig.getPassword());    }    /**     * 连接FTP服务器     *     * @return     */    public boolean connect() throws IOException {        boolean stat = false;        if (ftpClient.isConnected()) {            return true;        }        ftpClient.connect(this.getServer(), this.getPort());        stat = true;        return stat;    }    /**     * 打开FTP服务器     *     * @return     */    public boolean open() throws IOException {        if (!connect()) {            return false;        }        boolean stat = false;        stat = ftpClient.login(this.getUserName(), this.getPassword());        // 检测连接是否成功        int reply = ftpClient.getReplyCode();        if (!FTPReply.isPositiveCompletion(reply)) {            close();            stat = false;        }        return stat;    }    /**     * 关闭FTP服务器     */    public void close() throws IOException {        if (ftpClient != null) {            if (ftpClient.isConnected()) {                ftpClient.logout();                ftpClient.disconnect();            }            ftpClient = null;        }    }    /**     * 获取目录下所有的文件名称     *     * @param filePath 指定的目录     * @return 文件列表, 或者null     */    public FTPFile[] listFiles(String filePath) throws IOException {        return ftpClient.listFiles(filePath);    }    public String[] listNames(String filePath) throws IOException {        return ftpClient.listNames(filePath);    }    /**     * 从FTP服务器上下载文件     *     * @param ftpDirectoryAndFileName   ftp服务器文件路径，以/dir形式开始     * @param localDirectoryAndFileName 保存到本地的目录     * @return 文件名     */    public boolean download(String ftpDirectoryAndFileName, String localDirectoryAndFileName) throws IOException {        ftpClient.enterLocalPassiveMode(); // Use passive mode as default        // 将路径中的斜杠统一        char[] chars = ftpDirectoryAndFileName.toCharArray();        StringBuffer sbStr = new StringBuffer(256);        for (int i = 0; i < chars.length; i++) {            if ('\\' == chars[i]) {                sbStr.append('/');            } else {                sbStr.append(chars[i]);            }        }        ftpDirectoryAndFileName = sbStr.toString();        String filePath = ftpDirectoryAndFileName.substring(0, ftpDirectoryAndFileName.lastIndexOf("/"));        String fileName = ftpDirectoryAndFileName.substring(ftpDirectoryAndFileName.lastIndexOf("/") + 1);        this.cd(filePath);        ftpClient.retrieveFile(new String(fileName.getBytes(), CharsetHelper.getDefault()),                new FileOutputStream(localDirectoryAndFileName)); // download        return true;    }    /**     * 上传文件到FTP服务器     *     * @param filename     * @param path     * @param     * @return     */    public boolean upload(String filename, String path, InputStream stream) throws IOException {        boolean stat = false;        try {            cd(path);            ftpClient.setBufferSize(1024);            ftpClient.setControlEncoding(CharsetHelper.getDefault());            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);            stat = ftpClient.storeFile(filename, stream);        } finally {            StreamHelper.close(stream);        }        return stat;    }    /**     * 上传文件到FTP服务器     *     * @param filename     * @param path     * @param     * @return     */    public boolean upload(String filename, String path, String filepath) throws IOException {        return upload(filename, path, new File(filepath));    }    /**     * 上传文件     *     * @param filename     * @param path     * @param file     * @return     */    public boolean upload(String filename, String path, File file) throws IOException {        FileInputStream stream = new FileInputStream(file);        return upload(filename, path, stream);    }    /**     * 循环切换目录     *     * @param dir     * @return     */    public boolean cd(String dir) throws IOException {        boolean stat = true;        String[] dirs = dir.split("/");        if (dirs.length == 0) {            return ftpClient.changeWorkingDirectory(dir);        }        stat = ftpClient.changeToParentDirectory();        for (String dirss : dirs) {            stat = stat && ftpClient.changeWorkingDirectory(dirss);        }        stat = true;        return stat;    }    /***     * 创建目录     * @param dir     * @return     */    public boolean makeDirectory(String dir) throws IOException {        boolean stat = false;        ftpClient.changeToParentDirectory();        ftpClient.makeDirectory(dir);        stat = true;        return stat;    }    /***     * 创建多个层级目录     * @param dir dong/zzz/ddd/ewv     * @return     */    public boolean makeDirectorys(String dir) throws IOException {        String[] dirs = dir.split("/");        if (dirs.length == 0) {            return false;        }        boolean stat = false;        ftpClient.changeToParentDirectory();        for (String dirss : dirs) {            ftpClient.makeDirectory(dirss);            ftpClient.changeWorkingDirectory(dirss);        }        ftpClient.changeToParentDirectory();        stat = true;        return stat;    }    /**     * 删除文件夹     *     * @param pathname     * @return     */    public boolean removeDirectory(String pathname) throws IOException {        return ftpClient.removeDirectory(pathname);    }    /**     * 删除文件     *     * @param pathname     * @return     */    public boolean deleteFile(String pathname) throws IOException {        boolean stat = false;        stat = ftpClient.deleteFile(pathname);        return stat;    }    /**     * 移动文件或文件夹     *     * @param pathname1     * @param pathname2     * @return     */    public boolean rename(String pathname1, String pathname2) throws IOException {        return ftpClient.rename(pathname1, pathname2);    }}