package song.common.toolkit.serializer;import song.common.io.ReaderHelper;import song.common.lang.ObjectHelper;import song.common.lang.StringHelper;import song.common.reflect.ClassHelper;import song.common.util.ListHelper;import song.common.util.SystemHelper;import java.io.IOException;import java.util.*;/** * description: * author:          song * createDate:      2017/10/19 */public class TXTSerializer implements IDataSerializer {    private String separator = "\t";    //空值是否转为空字符串    private boolean nullAsEmpty = true;    public void setNullAsEmpty(boolean nullAsEmpty) {        this.nullAsEmpty = nullAsEmpty;    }    public String getSeparator() {        return separator;    }    public void setSeparator(String separator) {        this.separator = separator;    }    /**     * 将对象序列化为txt文本     *     * @param object     * @return     */    public String toString(Object object, boolean isColumn) {        try {            return parseString(object, isColumn);        } catch (IllegalAccessException e) {            e.printStackTrace();        }        return null;    }    public String toString(Object object) {        return toString(object, true);    }    private String parseString(Object object, boolean isInsertColumn) throws IllegalAccessException {        StringBuilder sb = new StringBuilder();        Map<String, Object> map = ClassHelper.getFieldValues(object);        //判断是否写入列头        if (isInsertColumn) {            Set<String> keys = map.keySet();            for (Iterator<String> iterator = keys.iterator(); iterator.hasNext(); ) {                String next = iterator.next();                sb.append(next);                if (iterator.hasNext()) {                    sb.append(separator);                }            }            //写入列头换行符            sb.append(SystemHelper.lineSeparator);        }        //写入数据        Collection<Object> values = map.values();        for (Iterator<Object> iterator = values.iterator(); iterator.hasNext(); ) {            Object next = iterator.next();            sb.append(nullAsEmpty ? ObjectHelper.asEmpty(next) : next);            if (iterator.hasNext()) {                sb.append(separator);            }        }        //写入数据换行符        sb.append(SystemHelper.lineSeparator);        return sb.toString();    }    /**     * 将集合对象序列化为txt文本     *     * @param list     * @return     * @throws IllegalAccessException     */    public <T> String toString(List<T> list) throws IllegalAccessException {        StringBuilder sb = new StringBuilder();        if (!ListHelper.isEmpty(list)) {            for (int i = 0; i < list.size(); i++) {                T o = list.get(i);                sb.append(parseString(o, i == 0));            }        }        return sb.toString();    }    private Map<String, String> parseLine(String[] columns, String line) {        String[] data = line.split(separator);        Map<String, String> map = new HashMap<String, String>();        for (int i = 0; i < columns.length; i++) {            map.put(columns[i], data[i]);        }        return map;    }    /**     * 将txt符合分割规则的字符串解析为List<Map>     *     * @param s     * @return     * @throws IOException     */    public List<Map<String, String>> parseListMap(String s) throws Exception {        List<Map<String, String>> list = new ArrayList<Map<String, String>>();        if (!StringHelper.isEmpty(s)) {            ArrayList<String> lines = ReaderHelper.readLines(s);            if (lines.size() > 2) {                String[] columns = lines.get(0).split(separator);                for (int i = 1; i < lines.size(); i++) {                    list.add(parseLine(columns, lines.get(i)));                }            }        }        return list;    }    /**     * 将txt符合分割规则的字符串解析为List     *     * @param s     * @return     * @throws Exception     */    public List<String[]> parseList(String s) throws Exception {        List<String[]> list = new ArrayList<String[]>();        if (!StringHelper.isEmpty(s)) {            ArrayList<String> lines = ReaderHelper.readLines(s);            for (String line : lines) {                list.add(line.split(separator));            }        }        return list;    }    /**     * 将txt符合分割规则的字符串解析为对象集合     *     * @param s     * @param tClass     * @param <T>     * @return     * @throws Exception     */    public <T> List<T> parseArray(String s, Class<T> tClass) {        List<T> list = new ArrayList<T>();        if (!StringHelper.isEmpty(s)) {            try {                ArrayList<String> lines = ReaderHelper.readLines(s);                if (lines.size() > 2) {                    String[] columns = lines.get(0).split(separator);                    for (int i = 1; i < lines.size(); i++) {                        String[] data = lines.get(i).split(separator);                        list.add(ClassHelper.newInstance(tClass, columns, data));                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }        return list;    }    /**     * 将txt符合分割规则的字符串解析为对象     *     * @param s     * @param tClass     * @param <T>     * @return     */    public <T> T parseObject(String s, Class<T> tClass) {        if (!StringHelper.isEmpty(s)) {            try {                ArrayList<String> lines = ReaderHelper.readLines(s, 2);                if (lines.size() == 2) {                    String[] columns = lines.get(0).split(separator);                    String[] data = lines.get(1).split(separator);                    return ClassHelper.newInstance(tClass, columns, data);                }            } catch (Exception e) {                e.printStackTrace();            }        }        return null;    }}