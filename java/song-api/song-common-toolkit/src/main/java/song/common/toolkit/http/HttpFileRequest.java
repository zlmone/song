package song.common.toolkit.http;import org.apache.commons.fileupload.FileItem;import org.apache.commons.fileupload.FileUploadException;import org.apache.commons.fileupload.disk.DiskFileItemFactory;import org.apache.commons.fileupload.servlet.ServletFileUpload;import song.common.io.FileHelper;import song.common.io.PathHelper;import song.common.io.StreamHelper;import song.common.lang.CharsetHelper;import song.common.lang.StringHelper;import song.common.net.http.HttpFile;import song.common.net.http.HttpRequest;import song.common.util.ListHelper;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * description: * author:          song * createDate:      2017/10/10 */public class HttpFileRequest extends HttpRequest {    protected ServletFileUpload uploader;    private List<HttpFile> fileItems = new ArrayList<HttpFile>();    private HashMap<String, String> formItems = new HashMap<String, String>();    public HttpFileRequest(HttpServletRequest request) throws IOException, FileUploadException {        super(request);        this.uploader = new ServletFileUpload(new DiskFileItemFactory());        this.uploader.setHeaderEncoding(CharsetHelper.getDefault());        this.parse();    }    public HashMap<String, String> getFormItems() {        return formItems;    }    public List<HttpFile> getFileItems() {        return fileItems;    }    private void parse() throws IOException, FileUploadException {        List<FileItem> items = uploader.parseRequest(request);        if (!ListHelper.isEmpty(items)) {            for (FileItem item : items) {                String field = item.getFieldName();                if (!item.isFormField()) {                    String filePath = item.getName();                    HttpFile httpFile = new HttpFile();                    httpFile.setFieldName(field);                    httpFile.setFilePath(filePath);                    httpFile.setSize(item.getSize());                    httpFile.setFileName(FileHelper.getFileName(filePath));                    httpFile.setBytes(StreamHelper.getBytes(item.getInputStream()));                    httpFile.setExtension(FileHelper.getExtensionName(httpFile.getFileName()));                    fileItems.add(httpFile);                } else {                    //解析form参数                    formItems.put(field, item.getString(CharsetHelper.getDefault()));                }                //删除产生的临时文件                item.delete();            }        }    }    /**     * 保存文件到本地目录     *     * @param file     * @param saveFilePath     * @return     * @throws IOException     */    public String saveFile(HttpFile file, String saveFilePath) throws IOException {        String ext = FileHelper.getExtension(file.getFilePath());        String newFileName = FileHelper.getNewFileName(ext);        FileHelper.write(file.getBytes(), saveFilePath, newFileName);        file.setFilePath(PathHelper.combine(saveFilePath, newFileName));        return newFileName;    }    /**     * 批量保存文件到本地目录     *     * @param saveFilePath     * @return     * @throws IOException     */    public Map<String, HttpFile> batchSaveFile(String saveFilePath) throws IOException {        Map<String, HttpFile> map = new HashMap<String, HttpFile>();        for (HttpFile fileItem : fileItems) {            String newFileName = saveFile(fileItem, saveFilePath);            map.put(newFileName, fileItem);        }        return map;    }    /**     * 获取请求中的数据值323     * @param key     * @return     */    public String getData(String key) {        String data = this.formItems.get(key);        if (StringHelper.isEmpty(data)) {            data = getParameter(key);        }        return data;    }}