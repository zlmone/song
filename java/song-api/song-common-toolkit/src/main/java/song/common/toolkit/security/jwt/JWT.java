package song.common.toolkit.security.jwt;import io.jsonwebtoken.Claims;import io.jsonwebtoken.JwtBuilder;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import song.common.lang.ObjectHelper;import song.common.lang.StringHelper;import song.common.security.SimpleUser;import javax.crypto.spec.SecretKeySpec;import javax.xml.bind.DatatypeConverter;import java.security.Key;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * description: * author:          song * createDate:      2018/5/17 */public class JWT {    private JWTAudience audience;    public JWTAudience getJwtAudience() {        return audience;    }    public void setJwtAudience(JWTAudience audience) {        this.audience = audience;    }    public JWT(JWTAudience jwtAudience) {        this.audience = jwtAudience;    }    public JWT() {    }    /**     * 默认的过期时间     */    public static final long expireMillis = 20 * 60 * 1000;    public static final String bearer = "Bearer ";    public static final String tokenHeader = "Authorization";    /**     * 解析JWT字符串     *     * @param token     * @return     */    public Claims parse(String token) {        token = removeBearer(token);        Claims claims = Jwts.parser()                .setSigningKey(DatatypeConverter.parseBase64Binary(audience.getSecret()))                .parseClaimsJws(token).getBody();        return claims;    }    public static  String removeBearer(String token) {        if (token.startsWith(bearer)) {            token = token.replace(bearer, "");        }        return token;    }    /**     * 创建JWT字符串     *     * @param claims     * @return     */    public String create(Map<String, Object> claims) {        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;        long nowMillis = System.currentTimeMillis();        Date now = new Date(nowMillis);        //生成签名密钥        byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(audience.getSecret());        Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());        //添加构成JWT的参数        JwtBuilder builder = Jwts.builder().setHeaderParam("typ", "JWT");        if (!StringHelper.isEmpty(audience.getIssuer())) {            builder.setIssuer(audience.getIssuer());        }        if (!StringHelper.isEmpty(audience.getAudience())) {            builder.setAudience(audience.getAudience());        }        builder.signWith(signatureAlgorithm, signingKey);        if (claims != null) {            for (Map.Entry<String, Object> entry : claims.entrySet()) {                builder.claim(entry.getKey(), entry.getValue());            }        }        //添加Token过期时间        if (audience.getExpireMillis() >= 0) {            long expMillis = nowMillis + audience.getExpireMillis();            Date exp = new Date(expMillis);            builder.setExpiration(exp).setNotBefore(now);        }        //生成JWT        return bearer + builder.compact();    }    public String getUserId(String token) {        return this.parse(token).get("userid").toString();    }    public SimpleUser getSimpleUser(String token) {        Claims claims = this.parse(token);        SimpleUser user = new SimpleUser(claims.get("userid").toString());        user.setUserName(ObjectHelper.asEmpty(claims.get("username")));        return user;    }    public String create(SimpleUser user) {        Map<String, Object> map = new HashMap<String, Object>();        map.put("userid", user.getUserId());        map.put("username", user.getUserName());        //创建jwt的token        return this.create(map);    }    public boolean valid(String token) {        String userid = getUserId(token);        return !StringHelper.isEmpty(userid);    }}