package song.common.toolkit.excel;import org.apache.poi.ss.usermodel.*;import org.apache.poi.ss.util.CellRangeAddress;import org.apache.poi.xssf.streaming.SXSSFCell;import org.apache.poi.xssf.streaming.SXSSFRow;import org.apache.poi.xssf.streaming.SXSSFSheet;import org.apache.poi.xssf.streaming.SXSSFWorkbook;import org.apache.poi.xssf.usermodel.*;import song.common.io.StreamHelper;import song.common.lang.ObjectHelper;import song.common.lang.StringHelper;import song.common.ui.MultipleColumnParser;import song.common.ui.table.RowspanColumn;import song.common.ui.table.TableColumn;import song.common.util.ListHelper;import java.io.IOException;import java.io.OutputStream;import java.util.List;import java.util.Map;/** * description:     写入xlsx文件 * author:          song * createDate:      2018/5/8 */public class XlsxWriter extends ExcelWriter {    public XlsxWriter(WriteExcel excel) {        super(excel);    }    @Override    public void write(OutputStream stream) throws IOException {        List<WriteExcelSheet> sheets = excel.getSheets();        if (!ListHelper.isEmpty(sheets)) {            //创建工作薄            SXSSFWorkbook  workbook = new SXSSFWorkbook();            try {                //循环创建片区                for (int i = 0; i < sheets.size(); i++) {                    WriteExcelSheet sheet = sheets.get(i);                    //判断sheetName是否为空，为空则设置默认名称                    if (StringHelper.isEmpty(sheet.getSheetName())) {                        sheet.setSheetName("Sheet" + (i + 1));                    }                    createSheet(workbook, sheet);                }                workbook.write(stream);            }finally {                workbook.close();            }            StreamHelper.close(stream);        }    }    private void createSheet(SXSSFWorkbook  workbook, WriteExcelSheet sheetOptions) {        //创建sheet        SXSSFSheet sheet = workbook.createSheet(sheetOptions.getSheetName());        int headRowNumber = 0;        //设置列宽        List<TableColumn> columns = sheetOptions.getColumns();        if (!ListHelper.isEmpty(columns)) {            //创建标题行            CellStyle style = getHeadCellStyle(workbook);            //先生成列的行数            headRowNumber = MultipleColumnParser.getDepthRows(columns);            for (int i = 0; i < headRowNumber; i++) {                SXSSFRow head = sheet.createRow(i);                head.setHeightInPoints(20);// 设备标题的高度            }            //创建表头列            int startColumn=sheetOptions.getStartColumnIndex()-1;            int startRow=sheetOptions.getStartRowIndex()-1;            this.createHeadRow(sheet, columns, style, startColumn, startRow, headRowNumber);            //是否冻结列头行            if (sheetOptions.isFixedHeader()) {                sheet.createFreezePane(0, headRowNumber, 0, sheetOptions.getStartRowIndex());            }        }        //写入数据行        CellStyle style = getRowCellStyle(workbook);        createDataRow(sheet, sheetOptions, style, headRowNumber);    }    /**     * 创建表头     *     * @param sheet     * @param columns     * @param style     * @param parentColIndex     * @param parentRowIndex     * @param totalDepth     表头总深度     */    private void createHeadRow(SXSSFSheet sheet, List<TableColumn> columns, CellStyle style,                               int parentColIndex, int parentRowIndex, int totalDepth    ) {        for (int i = 0; i < columns.size(); i++) {            TableColumn column = columns.get(i);            List<TableColumn> children = column.getColumns();            //计算当前跨的列数            int colspan = MultipleColumnParser.getColspan(children);            //如果当前有子集，则只跨一行，否则总深度减去父级深度            int rowspan = 1;            if (ListHelper.isEmpty(children)) {                rowspan = totalDepth - (parentRowIndex + 1);            }            //根据计算好的跨行和跨列，生成对应的单元格            for (int j = 1; j <= rowspan; j++) {                for (int k = 1; k <= colspan; k++) {                    SXSSFRow row = sheet.getRow(parentRowIndex + j);                    SXSSFCell cell = row.createCell(parentColIndex + k);                    cell.setCellValue(column.getLabel());                    cell.setCellStyle(style);                }            }            //合并列，合并行            if (rowspan > 1 || colspan > 1) {                CellRangeAddress range = new CellRangeAddress(                        parentRowIndex + 1, parentRowIndex + rowspan,                        parentColIndex + 1, parentColIndex + colspan);//起始行，终止行，起始列，终止列                sheet.addMergedRegion(range);            }            //设置列宽，数据列才进行设置，否则宽度错乱            if (column.getWidth() > 0 && ListHelper.isEmpty(children)) {                //转换显示比例，按像素比例显示                int sheetWidth = new Double(column.getWidth() * 35.7).intValue();                sheet.setColumnWidth(parentColIndex + 1, sheetWidth);            }            //递归生成子列            if (!ListHelper.isEmpty(column.getColumns())) {                createHeadRow(sheet, column.getColumns(), style,                        parentColIndex,                        parentRowIndex + rowspan,                        totalDepth);            }            //下个节点的列下标=父级的列下标+当前所跨的列            parentColIndex += colspan;        }    }    /**     * 创建数据行     *     * @param sheet     * @param sheetOptions     * @param style     * @param totalDepth   列的深度     */    private void createDataRow(            SXSSFSheet sheet, WriteExcelSheet sheetOptions,            CellStyle style, int totalDepth) {        List<TableColumn> dataColumns = MultipleColumnParser.getDataColumns(sheetOptions.getColumns());        List<Map<String, Object>> rows = sheetOptions.getRows();        if (!ListHelper.isEmpty(rows)) {            List<RowspanColumn> rowspanColumns = sheetOptions.getRowspanColumns();            //循环创建数据行            int rowCount = rows.size();            for (int i = 0; i < rowCount; i++) {                int rowIndex = i + totalDepth;                SXSSFRow row = sheet.createRow(rowIndex);                for (int j = 0; j < dataColumns.size(); j++) {                    SXSSFCell cell = row.createCell(j);                    TableColumn column = dataColumns.get(j);                    String value = ObjectHelper.asEmpty(rows.get(i).get(column.getProp()));                    cell.setCellValue(value);                    //设置数据对齐模式                    String htmlAlign = column.getAlign();                    HorizontalAlignment alignment = HorizontalAlignment.CENTER;                    if (!StringHelper.isEmpty(htmlAlign)) {                        if (htmlAlign.toLowerCase() == "left") {                            alignment = HorizontalAlignment.LEFT;                        }                        if (htmlAlign.toLowerCase() == "right") {                            alignment = HorizontalAlignment.RIGHT;                        }                    }                    style.setAlignment(alignment);                    cell.setCellStyle(style);                    //设置相同数据自动合并                    if (!ListHelper.isEmpty(rowspanColumns)) {                        for (RowspanColumn rowspanColumn : rowspanColumns) {                            //如果当前列需要合并，则比对当前行和上一行的值是否一样                            if (rowspanColumn.getProp().equalsIgnoreCase(column.getProp())) {                                String prevValue = rowspanColumn.getPrevValue();                                if (!StringHelper.isEmpty(prevValue)) {                                    //如果不是第一行，则开始进行值比对                                    if (value.equals(prevValue)) {                                        //如果当前值和上个值相同，则记录合并行数                                        rowspanColumn.setMergeCount(rowspanColumn.getMergeCount() + 1);                                        //如果到了最后一行，也需要判断是否需要合并                                        if (i == rowCount - 1) {                                            mergeRowspanCell(sheet, rowspanColumn, j);                                            //清空和并信息                                            rowspanColumn.clearInfo();                                        }                                    } else {                                        //如果当前值和上个值不同，则判断是否需要合并，并初始化比对值                                        mergeRowspanCell(sheet, rowspanColumn, j);                                        rowspanColumn.setInfo(value, rowIndex);                                    }                                } else {                                    //如果是第一行，添加初始的比对值                                    rowspanColumn.setInfo(value, rowIndex);                                }                            }                        }                    }                }            }        }    }    /**     * 合并数据列相同值的单元格     *     * @param sheet     * @param rowspanColumn     * @param colIndex     */    private void mergeRowspanCell(SXSSFSheet sheet, RowspanColumn rowspanColumn, int colIndex) {        int mergeCount = rowspanColumn.getMergeCount();        if (mergeCount > 0) {            CellRangeAddress range = new CellRangeAddress(                    rowspanColumn.getStartIndex(), rowspanColumn.getStartIndex() + mergeCount, colIndex, colIndex);//起始行，终止行，起始列，终止列            sheet.addMergedRegion(range);            //合并后需要置空待合并的行数            rowspanColumn.setMergeCount(0);        }    }    /**     * 设置表头单元格样式     *     * @param wb     * @return     */    public CellStyle getHeadCellStyle(SXSSFWorkbook wb) {        CellStyle style = wb.createCellStyle();        style.setWrapText(true);// 设置自动换行        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER); // 创建一个居中格式        //设置背景色需要先设置填充方式        style.setFillForegroundColor(IndexedColors.PALE_BLUE.index);        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);//填充前景色        style.setBottomBorderColor(IndexedColors.BLACK.index);        style.setBorderBottom(BorderStyle.THIN);        style.setBorderLeft(BorderStyle.THIN);        style.setBorderRight(BorderStyle.THIN);        style.setBorderTop(BorderStyle.THIN);        Font headerFont = wb.createFont(); // 创建字体样式        headerFont.setBold(true); // 字体加粗        headerFont.setFontName("黑体"); // 设置字体类型        headerFont.setFontHeightInPoints((short) 10); // 设置字体大小        style.setFont(headerFont); // 为标题样式设置字体样式        return style;    }    /**     * 设置数据单元格样式     *     * @param wb     * @return     */    public CellStyle getRowCellStyle(SXSSFWorkbook wb) {        CellStyle style = wb.createCellStyle();        //style.setWrapText(true);// 设置自动换行        //style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER); // 创建一个居中格式        style.setBottomBorderColor(IndexedColors.BLACK.index);        style.setBorderBottom(BorderStyle.THIN);        style.setBorderLeft(BorderStyle.THIN);        style.setBorderRight(BorderStyle.THIN);        style.setBorderTop(BorderStyle.THIN);        /*XSSFFont headerFont = wb.createFont(); // 创建字体样式        //headerFont.setBold(true); // 字体加粗        headerFont.setFontName("黑体"); // 设置字体类型        headerFont.setFontHeightInPoints((short) 10); // 设置字体大小        style.setFont(headerFont); // 为标题样式设置字体样式*/        return style;    }}