package song.common.toolkit.xml;import org.dom4j.*;import org.dom4j.io.SAXReader;import song.common.ui.TagNode;import java.io.File;import java.net.URL;import java.util.Iterator;/** * description: * author:          song * createDate:      2017/10/27 */public class XMLHelper {    public static Document parseDocument(String s) throws DocumentException {        return DocumentHelper.parseText(s);    }    public static Document readDocument(String filePath) throws DocumentException {        SAXReader reader = new SAXReader();        return reader.read(new File(filePath));    }    public static Document readDocument(URL url) throws DocumentException {        SAXReader reader = new SAXReader();        return reader.read(url);    }    /**     * 递归解析xml文档节点     *     * @param document     * @return     */    public static TagNode parseTagNode(Document document) {        if (document != null) {            Element root = document.getRootElement();            return parseTagNode(root);        }        return null;    }    public static TagNode parseTagNode(String filePath) throws DocumentException {        return parseTagNode(readDocument(filePath));    }    public static TagNode parseTagNode(URL url) throws DocumentException {        return parseTagNode(readDocument(url));    }    /**     * 递归解析xml节点     *     * @param element     * @return     */    public static TagNode parseTagNode(Element element) {        if (element != null && element.getNodeType() == Node.ELEMENT_NODE) {            TagNode tagNode = new TagNode();            tagNode.setName(element.getName());            tagNode.setText(element.getText());            //遍历节点属性            for (Iterator<Attribute> attributeIterator = element.attributeIterator(); attributeIterator.hasNext(); ) {                Attribute attr = attributeIterator.next();                tagNode.addAttribute(attr.getName(), attr.getValue());            }            //循环读取每个子节点            for (Iterator<Element> tIterator = element.elementIterator(); tIterator.hasNext(); ) {                Element item = tIterator.next();                TagNode childNode = parseTagNode(item);                if (childNode != null) {                    tagNode.appendChild(childNode);                }            }            return tagNode;        }        return null;    }}