package song.api.common.filter;import song.api.common.config.JWTConfig;import song.common.lang.StringHelper;import song.common.net.http.HttpResponse;import song.common.result.ActionResult;import song.common.result.ResultCode;import song.common.toolkit.security.jwt.JWT;import song.common.toolkit.serializer.SerializerFactory;import javax.servlet.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * description: * author:          song * createDate:      2018/6/14 */public class JWTFilter implements Filter {    @Override    public void init(FilterConfig filterConfig) throws ServletException {    }    @Override    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        HttpServletRequest httpRequest = (HttpServletRequest)request;        ActionResult result = new ActionResult(false,ResultCode.unauthorized);        String currentUrl=httpRequest.getRequestURL().toString();        //对不需要校验的地址放行        for (String action : JWTConfig.getIgnoreRoute()) {            if(currentUrl.indexOf(action)>-1){                chain.doFilter(request, response);                return;            }        }        String token = httpRequest.getHeader(JWT.tokenHeader);        if(StringHelper.isEmpty(token) || token.length()<7){            result.setMsg("鉴权失败：token为空");        }else {            try {                JWT jwt = new JWT(JWTConfig.getAudience());                if (jwt.valid(token)) {                    chain.doFilter(request, response);                    return;                } else {                    result.setMsg("鉴权失败：token无效或失效");                }            } catch (Exception ex) {                result.setMsg(ex.getMessage());            }        }        HttpServletResponse httpResponse = (HttpServletResponse) response;        HttpResponse resp=new HttpResponse(httpResponse);        String jsonResult = SerializerFactory.getJSONSerializer().toString(result);        resp.reset().setCharset().setJsonType().write(jsonResult);    }    @Override    public void destroy() {    }}