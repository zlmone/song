package song.common.ui;import song.common.ui.table.TableColumn;import song.common.util.ListHelper;import java.util.ArrayList;import java.util.List;/** * description: * author:          song * createDate:      2018/5/10 */public class MultipleColumnParser {    /**     * 获取子层级的所有的数据列     *     * @param columns     */    public static List<TableColumn> getDataColumns(List<TableColumn> columns) {        List<TableColumn> dataColumns = new ArrayList<TableColumn>();        if (!ListHelper.isEmpty(columns)) {            for (TableColumn column : columns) {                if (!ListHelper.isEmpty(column.getColumns())) {                    dataColumns.addAll(getDataColumns(column.getColumns()));                } else {                    //当没有子集才添加到数据行中                    dataColumns.add(column);                }            }        }        return dataColumns;    }    /**     * 获取最深层级的行数     *     * @param columns     * @return     */    public static int getDepthRows(List<TableColumn> columns) {        //当前行的深度        int rowNum = 0;        if (!ListHelper.isEmpty(columns)) {            for (TableColumn column : columns) {                int currentNum=1;                int childNum = getChildDepthRows(column.getColumns())+currentNum;                if (childNum > rowNum) {                    rowNum=childNum;                }            }        }        return rowNum;    }    private static int getChildDepthRows(List<TableColumn> columns) {        //当前行的深度        int rowNum =0;        if (!ListHelper.isEmpty(columns)) {            rowNum=1;            for (TableColumn column : columns) {                if (!ListHelper.isEmpty(column.getColumns())) {                    //累加子集的深度                    rowNum += getChildDepthRows(column.getColumns());                }            }        }        return rowNum;    }    /**     * 获取当前列所跨的列数     *     * @param columns     * @return     */    public static int getColspan(List<TableColumn> columns) {        int colspan = 0;        if (!ListHelper.isEmpty(columns)) {            for (TableColumn column : columns) {                if (!ListHelper.isEmpty(column.getColumns())) {                    colspan += getColspan(column.getColumns());                } else {                    colspan++;                }            }        } else {            //如果没有子集，就计算本身            colspan = 1;        }        return colspan;    }}