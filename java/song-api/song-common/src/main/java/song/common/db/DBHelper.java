package song.common.db;import song.common.config.Configuration;import song.common.lang.StringHelper;import java.io.IOException;import java.sql.*;/** * description: * author:          song * createDate:      2017/10/28 */public class DBHelper {    /**     * 根据数据库连接配置获取连接对象     *     * @param config     * @return     * @throws Exception     */    public static Connection getConnection(DBConnectionConfig config) throws Exception {        String driver = config.getDriver();        if (StringHelper.isEmpty(driver)) {            driver = getDriverName(config.getDbType());        }        Class.forName(driver);        return DriverManager.getConnection(config.getUrl(), config.getUserName(), config.getPassword());    }    /**     * 根据资源文件地址获取连接对象     *     * @param configPath     * @return     * @throws Exception     */    private static Connection getConnection(String configPath) throws Exception {        DBConnectionConfig config = getDBConfig(configPath);        return getConnection(config);    }    /**     * 根据资源文件路径获取数据库配置对象     *     * @param relativePath     * @return     * @throws IOException     */    public static DBConnectionConfig getDBConfig(String relativePath) throws IOException {        Configuration configuration = new Configuration(relativePath);        String dbType = configuration.getProperty("jdbc.dbType");        String driver = configuration.getProperty("jdbc." + dbType + ".driver");        String url = configuration.getProperty("jdbc.\"+dbType+\".url");        String userName = configuration.getProperty("jdbc.\"+dbType+\".username");        String password = configuration.getProperty("jdbc.\"+dbType+\".password");        DBConnectionConfig config = new DBConnectionConfig(DBType.parse(dbType), url, userName, password);        config.setDriver(driver);        return config;    }    /**     * 根据数据库类型获取对应的连接驱动     *     * @param dbType     * @return     * @throws SQLException     */    public static String getDriverName(DBType dbType) throws SQLException {        switch (dbType) {            case mysql:                return "com.mysql.jdbc.Driver";            case oracle:                return "oracle.jdbc.driver.OracleDriver";            case sqlserver:                return "com.microsoft.jdbc.sqlserver.SQLServerDriver";            case sqlite:                return "org.sqlite.JDBC";            case postgresql:                return "org.postgresql.Driver";            case access:                return "sun.jdbc.odbc.JdbcOdbcDriver";            case db2:                return "com.ibm.db2.jdbc.app.DB2Driver";        }        throw new SQLException(dbType.getName() + " is not supported temporarily");    }    /**     * 关闭连接对象     *     * @param connection     * @throws SQLException     */    public static void closeConnection(Connection connection) throws SQLException {        if (connection != null) {            connection.close();        }    }    /**     * 关闭数据库执行对象     *     * @param statement     * @throws SQLException     */    public static void closeStatement(PreparedStatement statement) throws SQLException {        if (statement != null) {            statement.close();        }    }    /**     * 关闭数据集连接对象     *     * @param resultSet     * @throws SQLException     */    public static void closeResultSet(ResultSet resultSet) throws SQLException {        if (resultSet != null) {            resultSet.close();        }    }    /**     * 关闭jdbc对象     *     * @param connection     * @param statement     * @throws SQLException     */    public static void close(Connection connection, PreparedStatement statement) throws SQLException {        closeConnection(connection);        closeStatement(statement);    }    /**     * 关闭jdbc对象     *     * @param connection     * @param statement     * @param resultSet     * @throws SQLException     */    public static void close(Connection connection, PreparedStatement statement, ResultSet resultSet) throws SQLException {        close(connection, statement);        closeResultSet(resultSet);    }}