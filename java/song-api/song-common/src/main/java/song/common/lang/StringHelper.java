package song.common.lang;import song.common.util.SystemHelper;import java.io.UnsupportedEncodingException;import java.util.List;/** * description: * author:          song * createDate:      2017/9/25 */public class StringHelper {    //region 空字符串处理    public static String getEmpty() {        return "";    }    /**     * 判断是否为空字符串（NULL、Empty、Blank）     *     * @param s     * @return     */    public static boolean isEmpty(String s) {        if (null == s || 0 == s.length()) {            return true;        }        return false;    }    public static boolean isBlank(String s) {        if(isEmpty(s) || 0==s.trim().length()){            return true;        }        return false;    }    /**     * 将NULL转为空字符串     *     * @param s     * @return     */    public static String asEmpty(String s) {        return s == null ? StringHelper.getEmpty() : s.trim();    }    //endregion    public static byte[] getBytes(String s) throws UnsupportedEncodingException {        return s.getBytes(CharsetHelper.getDefault());    }    //region 首字母大小写    private static String capitalize(String s, boolean isUpperCase) {        if (isEmpty(s)) {            return s;        }        String first = substring(s, 0, 1);        String remain = s.substring(1);        first = isUpperCase ? first.toUpperCase() : first.toLowerCase();        return first + remain;    }    /**     * 首字母大写     *     * @param s     * @return     */    public static String toUpperFirst(String s) {        return capitalize(s, true);    }    /**     * 首字母小写     *     * @param s     * @return     */    public static String toLowerFirst(String s) {        return capitalize(s, false);    }    //endregion    //region 截断和补齐    /**     * 截断字符串     *     * @param s     * @param length     * @return     */    public static String truncate(String s, int length) {        return s.length() > length ? substring(s, 0, length) + "···" : s;    }    //从开始位置截断指定长度字符串    public static String substring(String s, int beginIndex, int length) {        return s.substring(beginIndex, beginIndex + length);    }    private static String pad(String s, int length, String pad, boolean isLeft) {        if (s.length() < length) {            int len = length - s.length();            for (int i = 0; i < len; i++) {                s = isLeft ? (pad + s) : (s + pad);            }        }        return s;    }    /**     * 补齐左边字符串     *     * @param s     * @param length     * @param pad     * @return     */    public static String padLeft(String s, int length, String pad) {        return pad(s, length, pad, true);    }    /**     * 补齐右边字符串     *     * @param s     * @param length     * @param pad     * @return     */    public static String padRight(String s, int length, String pad) {        return pad(s, length, pad, false);    }    /**     * 剔除开始位置字符串     *     * @param s     * @param start     * @return     */    public static String trimStart(String s, String start) {        return s.startsWith(start) ? s.substring(start.length()) : s;    }    /**     * 剔除结束位置字符串     *     * @param s     * @param end     * @return     */    public static String trimEnd(String s, String end) {        return s.endsWith(end) ? substring(s, 0, s.length() - end.length()) : s;    }    //endregion    //region 替换查找    public static String replace(String s, String newChar, String... oldChars) {        for (String old : oldChars) {            s = s.replace(old, newChar);        }        return s;    }    public static String replaceAll(String s, String newChar, String... oldChars) {        for (String old : oldChars) {            s = s.replaceAll(old, newChar);        }        return s;    }    //endregion    public static String join(String join, List list) {        StringBuilder builder = new StringBuilder();        for (Object o : list) {            builder.append(o != null ? o.toString() : "").append(join);        }        if(builder.length() > 0){            builder.delete(builder.length() - join.length(), builder.length());        }        return builder.toString();//        return String.join(join, list);    }    /**     * 根据系统换行符分割字符串     *     * @param s     * @return     */    public static String[] splitLine(String s) {        return s.split(SystemHelper.lineSeparator);    }    /**     * 字符串包裹     *     * @param s     * @param wrap     * @return     */    public static String wrap(String s, String wrap) {        return wrap + s + wrap;    }    public static String wrap(String s, String left, String right) {        return left + s + right;    }    /**     * 按分隔符来拼接路径     *     * @param separator     * @param repeatSeparator     * @param paths     * @return     */    public static String combine(String separator, String repeatSeparator, String... paths) {        String basePath = StringHelper.trimEnd(paths[0], separator);        String path = "";        if (paths.length > 1) {            for (int i = 1; i < paths.length; i++) {                path = path + separator + paths[i];            }        }        path = path.replaceAll(repeatSeparator, separator);        return basePath + path;    }}