package song.common.io;import song.common.lang.ByteHelper;import song.common.lang.CharsetHelper;import song.common.lang.StringHelper;import java.io.*;/** * description:     StreamHelper * author:          song * createDate:      2017/9/25 */public class StreamHelper {    /**     * 关闭写入流     *     * @param stream     * @throws IOException     */    public static void close(InputStream stream) throws IOException {        if (stream != null) {            stream.close();        }    }    /**     * 关闭输出流     *     * @param stream     * @throws IOException     */    public static void close(OutputStream stream) throws IOException {        if (stream != null) {            stream.flush();            stream.close();        }    }    /**     * 关闭一个或多个流对象     *     * @param closeables 可关闭的流对象列表     */    public static void close(Closeable... closeables) throws IOException {        if (closeables != null && closeables.length > 0) {            for (Closeable closeable : closeables) {                if (closeable != null) {                    closeable.close();                }            }        }    }    /**     * 获取写入流中的内容，转换为byte[]     *     * @param stream     * @return     * @throws IOException     */    public static byte[] getBytes(InputStream stream) throws IOException {        if (stream == null) {            return null;        }        ByteArrayOutputStream outStream = null;        try {            outStream = new ByteArrayOutputStream();            byte[] data = new byte[1024];            int count = -1;            while ((count = stream.read(data)) != -1) {                outStream.write(data, 0, count);            }            data = null;        } finally {            close(outStream);            close(stream);        }        return outStream.toByteArray();    }    /**     * 读取写入流的内容，转换为String     *     * @param stream     * @param charset     * @return     * @throws IOException     */    public static String getString(InputStream stream, String charset) throws IOException {        return ByteHelper.toString(getBytes(stream), CharsetHelper.emptyDefault(charset));    }    /**     * 获取写入流中的内容     *     * @param stream     * @return     * @throws IOException     */    public static String getString(InputStream stream) throws IOException {        return ByteHelper.toString(getBytes(stream), CharsetHelper.getDefault());    }    /**     * 写入文件     *     * @param stream     * @param bytes     * @throws IOException     */    public static void write(OutputStream stream, byte[] bytes) throws IOException {        try {            if (!ByteHelper.isEmpty(bytes)) {                stream.write(bytes);                bytes = null;            }        } finally {            close(stream);        }    }    /**     * 写入文件     *     * @param stream     * @param s     * @throws IOException     */    public static void write(OutputStream stream, String s) throws IOException {        write(stream, StringHelper.getBytes(s));    }}