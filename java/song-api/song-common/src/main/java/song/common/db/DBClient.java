package song.common.db;import song.common.util.ListHelper;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;/** * description: * author:          song * createDate:      2017/10/29 */public class DBClient {    private static DBConnectionConfig config;    private Connection connection;    //是否自动提交事务    private boolean isAutoCommit = true;    public DBClient(String configPath) throws Exception {        //不指定数据库类型，则默认加载资源文件配置        if (config == null) {            config = DBHelper.getDBConfig(configPath);        }        initConnection();    }    public DBClient(DBType type, String url, String userName, String password) throws Exception {        config = new DBConnectionConfig(type, url, userName, password);        initConnection();    }    public DBClient(DBConnectionConfig connectionConfig) throws Exception {        config = connectionConfig;        initConnection();    }    public boolean isAutoCommit() {        return isAutoCommit;    }    public void setAutoCommit(boolean autoCommit) {        isAutoCommit = autoCommit;    }    private void initConnection() throws Exception {        connection = DBHelper.getConnection(config);        connection.setAutoCommit(isAutoCommit);    }    /**     * 执行非查询操作     *     * @param sql     * @param paramters     * @return     * @throws SQLException     */    public int executeUpdate(String sql, List<Object> paramters) throws SQLException {        PreparedStatement statement = null;        try {            statement = connection.prepareStatement(sql);            if (!ListHelper.isEmpty(paramters)) {                for (int i = 0; i < paramters.size(); i++) {                    statement.setObject(i, paramters.get(i));                }            }            return statement.executeUpdate();        } finally {            DBHelper.closeStatement(statement);        }    }    /**     * 执行查询操作     *     * @param sql     * @param paramters     * @return     * @throws SQLException     */    public ResultSet executeQuery(String sql, List<Object> paramters) throws SQLException {        PreparedStatement statement = null;        try {            statement = connection.prepareStatement(sql);            if (!ListHelper.isEmpty(paramters)) {                for (int i = 0; i < paramters.size(); i++) {                    statement.setObject(i, paramters.get(i));                }            }            return statement.executeQuery();        } finally {            DBHelper.closeStatement(statement);        }    }    /**     * 关闭连接对象     *     * @throws SQLException     */    public void close() throws SQLException {        DBHelper.closeConnection(connection);    }    /**     * 提交事务     *     * @throws SQLException     */    public void commit() throws SQLException {        if (!isAutoCommit) {            connection.commit();        }    }    /**     * 回滚事务     *     * @throws SQLException     */    public void rollback() throws SQLException {        if (!isAutoCommit) {            connection.rollback();        }    }}