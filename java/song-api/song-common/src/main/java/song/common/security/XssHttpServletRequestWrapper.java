package song.common.security;import song.common.lang.StringHelper;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;/** * description: * author:          song * createDate:      2019/1/7 */public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper {    private HttpServletRequest request;    public XssHttpServletRequestWrapper(HttpServletRequest request) {        super(request);        this.request = request;    }    @Override    public String getParameter(String name) {        String value = request.getParameter(name);        if (!StringHelper.isEmpty(value)) {            value = encodeBody(value);        }        return value;    }    private String encodeBody(String body) {        return escapeScript(xssEncode(body, 1));    }    public String escapeScript(String value) {        value = value.replace("script", "").replace("/script", "").replace("alert", "");        return value;    }    private static String xssEncode(String s, int type) {        if (s == null || s.isEmpty()) {            return s;        }        StringBuilder sb = new StringBuilder(s.length() + 16);        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            if (type == 0) {                switch (c) {                    case '\'':                        // 全角单引号                        sb.append('‘');                        break;                    case '\"':                        // 全角双引号                        sb.append('“');                        break;                    case '>':                        // 全角大于号                        sb.append('＞');                        break;                    case '<':                        // 全角小于号                        sb.append('＜');                        break;                    case '&':                        // 全角&符号                        sb.append('＆');                        break;                    case '\\':                        // 全角斜线                        sb.append('＼');                        break;                    case '#':                        // 全角井号                        sb.append('＃');                        break;                    // < 字符的 URL 编码形式表示的 ASCII 字符（十六进制格式） 是: %3c                    case '%':                        processUrlEncoder(sb, s, i);                        break;                    default:                        sb.append(c);                        break;                }            } else {                switch (c) {                    case '>':                        // 全角大于号                        sb.append('＞');                        break;                    case '<':                        // 全角小于号                        sb.append('＜');                        break;                    case '&':                        // 全角&符号                        sb.append('＆');                        break;                    case '\\':                        // 全角斜线                        sb.append('＼');                        break;                    case '#':                        // 全角井号                        sb.append('＃');                        break;                    // < 字符的 URL 编码形式表示的 ASCII 字符（十六进制格式） 是: %3c                    case '%':                        processUrlEncoder(sb, s, i);                        break;                    default:                        sb.append(c);                        break;                }            }        }        return sb.toString();    }    public static void processUrlEncoder(StringBuilder sb, String s, int index) {        if (s.length() >= index + 2) {            // %3c, %3C            if (s.charAt(index + 1) == '3' && (s.charAt(index + 2) == 'c' || s.charAt(index + 2) == 'C')) {                sb.append('＜');                return;            }            // %3c (0x3c=60)            if (s.charAt(index + 1) == '6' && s.charAt(index + 2) == '0') {                sb.append('＜');                return;            }            // %3e, %3E            if (s.charAt(index + 1) == '3' && (s.charAt(index + 2) == 'e' || s.charAt(index + 2) == 'E')) {                sb.append('＞');                return;            }            // %3e (0x3e=62)            if (s.charAt(index + 1) == '6' && s.charAt(index + 2) == '2') {                sb.append('＞');                return;            }        }        sb.append(s.charAt(index));    }    @Override    public String[] getParameterValues(String name) {        String[] parameterValues = super.getParameterValues(name);        if (parameterValues == null) {            return null;        }        for (int i = 0; i < parameterValues.length; i++) {            String value = parameterValues[i];            parameterValues[i] = encodeBody(value);        }        return parameterValues;    }}