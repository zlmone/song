package song.common.security;import song.common.lang.ByteHelper;import song.common.lang.StringHelper;import song.common.util.BASE64Helper;import javax.crypto.Cipher;import javax.crypto.KeyGenerator;import javax.crypto.SecretKey;import javax.crypto.spec.SecretKeySpec;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;/** * description:     CryptionHelper * author:          song * createDate:      2017/9/25 */public class CryptionHelper {    public static final String secretkey = "song.security";    /**     * MD5加密     *     * @param s     * @return     * @throws NoSuchAlgorithmException     * @throws UnsupportedEncodingException     */    public static String md5(String s) throws NoSuchAlgorithmException, UnsupportedEncodingException {        MessageDigest digest = MessageDigest.getInstance("md5");        return BASE64Helper.encode(digest.digest(StringHelper.getBytes(s)));    }    /**     * AES加密     *     * @param s     * @param secretKey     * @return     * @throws Exception     */    public static String aesEncrypt(String s, String secretKey) throws Exception {        KeyGenerator kgen = KeyGenerator.getInstance("AES");        SecureRandom random = SecureRandom.getInstance("SHA1PRNG");        random.setSeed(StringHelper.getBytes(secretKey));        kgen.init(128, random);        SecretKey key = new SecretKeySpec(kgen.generateKey().getEncoded(), "AES");        Cipher cipher = Cipher.getInstance("AES");        cipher.init(Cipher.ENCRYPT_MODE, key);        byte[] bytes = cipher.doFinal(StringHelper.getBytes(s));        return BASE64Helper.encode(bytes);    }    /**     * AES解密     *     * @param s     * @param secretKey     * @return     * @throws Exception     */    public static String aesDecrypt(String s, String secretKey) throws Exception {        KeyGenerator kgen = KeyGenerator.getInstance("AES");        SecureRandom random = SecureRandom.getInstance("SHA1PRNG");        random.setSeed(StringHelper.getBytes(secretKey));        kgen.init(128, random);        SecretKey key = new SecretKeySpec(kgen.generateKey().getEncoded(), "AES");        Cipher cipher = Cipher.getInstance("AES");        cipher.init(Cipher.DECRYPT_MODE, key);        byte[] decryptBytes = cipher.doFinal(BASE64Helper.decode(s));        return ByteHelper.toString(decryptBytes);    }}