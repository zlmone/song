package song.common.structure;import java.util.LinkedList;import java.util.Queue;/** * description: * author:          song * createDate:      2018/6/28 */public class BinaryTree {    private BinaryTreeNode root;    public BinaryTreeNode getRoot() {        return root;    }    public void setRoot(BinaryTreeNode root) {        this.root = root;    }    /**     * 中序遍历     * @param node     * @return     */    public String inOrder(BinaryTreeNode node) {        if (node != null) {            String s="";            s += inOrder(node.getLeftChild());            s += node.getData();            s += inOrder(node.getRightChild());            return s;        }        return null;    }    public String inOrder(){        return inOrder(root);    }    /**     * 先序遍历     * @param node     * @return     */    public String preOrder(BinaryTreeNode node) {        if (node != null) {            String s="";            s+=node.getData();            s+=preOrder(node.getLeftChild());            s+=preOrder(node.getRightChild());            return s;        }        return null;    }    public String preOrder() {        return preOrder(root);    }    /**     * 后序遍历     * @param node     * @return     */    public String postOrder(BinaryTreeNode node) {        if (node != null) {            String s="";            s+=postOrder(node.getLeftChild());            s+=postOrder(node.getRightChild());            s+=node.getData();            return s;        }        return null;    }    public String postOrder() {        return postOrder(root);    }    /**     * 层序遍历     * @param node     * @return     */    public String levelOrder(BinaryTreeNode node) {        if (node != null) {            Queue<BinaryTreeNode> queue = new LinkedList<>();            queue.offer(node);            String s="";            while (!queue.isEmpty()) {                s+=queue.poll().getData();                if (node.getLeftChild()!=null) {                    queue.offer(node.getLeftChild());                }                if (node.getRightChild()!=null) {                    queue.offer(node.getRightChild());                }            }        }        return null;    }    public String levelOrder() {        return levelOrder(root);    }}