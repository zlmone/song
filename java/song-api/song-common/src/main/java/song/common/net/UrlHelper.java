package song.common.net;import song.common.io.FileHelper;import song.common.io.FileType;import song.common.io.PathHelper;import song.common.lang.CharsetHelper;import song.common.lang.StringHelper;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.net.URLEncoder;/** * description:     UrlHelper * author:          song * createDate:      2017/9/25 */public class UrlHelper {    //拼接符    public static final String separator = "/";    public static final String separatorRegex = "/";    //重复拼接符的正则    private static final String repeatSeparatorRegex = "/+";    //region 类型判断    private static final String[] thunderType = {"magnet:", "thunder:", "ed2k:"};    private final static String[] mobileAgent = {"android", "iphone", "ipod", "ipad", "windows phone", "mqqbrowser", "blackberry", "yunos", "symbianos"};    public static String combine(String... urls) {        return StringHelper.combine(separator, repeatSeparatorRegex, urls);    }    /**     * url路径转为本地物理路径     *     * @param url     * @return     * @throws UnsupportedEncodingException     */    public static String toLocalPath(String url) throws UnsupportedEncodingException {        url = decode(StringHelper.trimStart(url, separator));        return url.replaceAll(separatorRegex, PathHelper.separatorRegex);    }    /**     * 获取url地址中的文件名     *     * @param url     * @return     */    public static String getFileName(String url) {        String cleanUrl = removeQuery(url);        return cleanUrl.substring(cleanUrl.lastIndexOf("/") + 1);    }    /**     * 获取url地址中的路径     *     * @param url     * @return     */    public static String getPath(String url) {        if (hasFile(url)) {            int index = url.lastIndexOf("/");            if (index > -1) {                return url.substring(0, index);            }        }        return url;    }    public static boolean hasFile(String url) {        return url.indexOf(".") > -1;    }    //endregion    /**     * 构建URL地址，拼接参数     *     * @param url     * @param query     * @return     */    public static String build(String url, String query) {        if (StringHelper.isEmpty(url)) {            return url;        }        if (!url.contains("?")) {            url += "?";        }        return url + StringHelper.trimStart(query, "?");    }    public static String removeQuery(String url) {        int index = url.indexOf("?");        return index > -1 ? StringHelper.substring(url, 0, index) : url;    }    /**     * 判断是否为迅雷下载链接     *     * @param url     * @return     */    public static boolean isThunderLink(String url) {        if (StringHelper.isEmpty(url)) {            return false;        }        for (int i = 0; i < thunderType.length; i++) {            if (url.trim().toLowerCase().startsWith(thunderType[i])) {                return true;            }        }        if (FileType.bt.contains(FileHelper.getExtensionName(url))) {            return true;        }        return false;    }    /**     * url参数编码     *     * @param s     * @param charset     * @return     * @throws UnsupportedEncodingException     */    public static String encode(String s, String charset) throws UnsupportedEncodingException {        return URLEncoder.encode(s, CharsetHelper.emptyDefault(charset));    }    /**     * url参数编码     *     * @param s     * @return     * @throws UnsupportedEncodingException     */    public static String encode(String s) throws UnsupportedEncodingException {        return URLEncoder.encode(s, CharsetHelper.getDefault());    }    /**     * url参数解码     *     * @param s     * @param charset     * @return     * @throws UnsupportedEncodingException     */    public static String decode(String s, String charset) throws UnsupportedEncodingException {        return URLDecoder.decode(s, CharsetHelper.emptyDefault(charset));    }    /**     * url参数解码     *     * @param s     * @return     * @throws UnsupportedEncodingException     */    public static String decode(String s) throws UnsupportedEncodingException {        return URLDecoder.decode(s, CharsetHelper.getDefault());    }    /**     * 判断请求是否来源于移动端     *     * @param userAgent     * @return     */    public static boolean isMobile(String userAgent) {        String[] agent = mobileAgent;        boolean flag = false;        String wnt = "windows nt";        String ua = userAgent.toLowerCase();        if (!ua.contains(wnt) || (ua.contains(wnt) && ua.contains("compatible; msie 9.0;"))) {            // 排除 苹果桌面系统            if (!ua.contains(wnt) && !ua.contains("macintosh")) {                for (String item : agent) {                    if (ua.contains(item)) {                        flag = true;                        break;                    }                }            }        }        return flag;    }}