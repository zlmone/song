package song.common.net.http;import song.common.io.StreamHelper;import song.common.lang.ConvertHelper;import song.common.net.UrlHelper;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * description:     HttpRequest * author:          song * createDate:      2017/9/27 */public class HttpRequest {    protected HttpServletRequest request;    public HttpRequest(HttpServletRequest request) throws UnsupportedEncodingException {        this.request = request;        this.request.setCharacterEncoding("UTF-8");    }    public String getParameter(String key) {        return request.getParameter(key);    }    public int getIntParameter(String key, int defaultValue) {        String param = getParameter(key);        return ConvertHelper.toInt(param, defaultValue);    }    /**     * 获取参数，转换为int，转换失败则返回默认值     *     * @param key     * @return     */    public int getIntParameter(String key) {        return getIntParameter(key, 0);    }    /**     * 获取请求流中的内容，返回byte[]     *     * @return     * @throws IOException     */    public byte[] getBytes() throws IOException {        return StreamHelper.getBytes(request.getInputStream());    }    /**     * 获取请求流中的内容，返回String     *     * @return     * @throws IOException     */    public String getString() throws IOException {        return StreamHelper.getString(request.getInputStream());    }    /**     * 获取当前网站项目根目录     *     * @return     */    public String getBasePath() {        String webAppName = request.getContextPath();        return request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + webAppName + "/";    }    /**     * 获取目录的根路径     *     * @param path     * @return     */    public String getRealPath(String path) {        return request.getSession().getServletContext().getRealPath(path);    }    /**     * 判断请求是否来源于移动端     *     * @return     */    public boolean isMobile() {        return UrlHelper.isMobile(getUserAgent());    }    public boolean isMultipart() {        String contentType = request.getContentType();        return contentType.toLowerCase().startsWith("multipart/");    }    public String getUserAgent() {        return request.getHeader("user-agent").toLowerCase();    }    public String getIp() {        String ip = request.getHeader("X-Forwarded-For");        if (ip != null) {            if (!ip.isEmpty() && !"unKnown".equalsIgnoreCase(ip)) {                int index = ip.indexOf(",");                if (index != -1) {                    return ip.substring(0, index);                } else {                    return ip;                }            }        }        ip = request.getHeader("X-Real-IP");        if (ip != null) {            if (!ip.isEmpty() && !"unKnown".equalsIgnoreCase(ip)) {                return ip;            }        }        ip = request.getHeader("Proxy-Client-IP");        if (ip != null) {            if (!ip.isEmpty() && !"unKnown".equalsIgnoreCase(ip)) {                return ip;            }        }        ip = request.getHeader("WL-Proxy-Client-IP");        if (ip != null) {            if (!ip.isEmpty() && !"unKnown".equalsIgnoreCase(ip)) {                return ip;            }        }        ip = request.getRemoteAddr();        return ip.equals("0:0:0:0:0:0:0:1") ? "127.0.0.1" : ip;    }}