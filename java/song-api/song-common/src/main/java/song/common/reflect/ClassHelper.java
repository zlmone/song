package song.common.reflect;import song.common.net.UrlHelper;import song.common.ui.TagNode;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * description: * author:          song * createDate:      2017/10/18 */public class ClassHelper {    /**     * 获取资源文件的url路径     *     * @param clazz     * @return     */    public static String getUrlPath(Class clazz) {        return clazz.getClass().getResource("/").getPath();    }    /**     * 获取资源文件的本地物理路径     *     * @param clazz     * @return     * @throws Exception     */    public static String getLocalPath(Class clazz) throws Exception {        return UrlHelper.toLocalPath(ClassHelper.getUrlPath(clazz));    }    public static List<String> getFieldNames(Class clazz) {        List<String> list = new ArrayList<String>();        Field[] fields = clazz.getDeclaredFields();        for (Field field : fields) {            String name = field.getName();            list.add(name);        }        return list;    }    public static List<String> getFieldNames(Object object) {        return getFieldNames(object.getClass());    }    public static Map<String, Object> getFieldValues(Object object) throws IllegalAccessException {        Map<String, Object> map = new HashMap<String, Object>();        Class clazz = object.getClass();        Field[] fields = clazz.getDeclaredFields();        for (Field field : fields) {            String name = field.getName();            field.setAccessible(true);            Object value = field.get(object);            map.put(name, value);        }        return map;    }    public static Field[] getFields(Object object) throws IllegalAccessException {        Class clazz = object.getClass();        return clazz.getDeclaredFields();    }    public static <T> T newInstance(Class<T> tClass, String[] fieldNames, String[] values) throws Exception {        T t = tClass.newInstance();        for (int i = 0; i < fieldNames.length; i++) {            setField(tClass, t, fieldNames[i], values[i]);        }        return t;    }    public static <T> T newInstance(Class<T> tClass, Map<String, Object> map) throws Exception {        T t = tClass.newInstance();        for (Map.Entry<String, Object> entry : map.entrySet()) {            setField(tClass, t, entry.getKey(), entry.getValue());        }        return t;    }    public static <T> T newInstance(Class<T> tClass, List<TagNode> nodes) throws Exception {        T t = tClass.newInstance();        for (TagNode node : nodes) {            setField(tClass, t, node.getName(), node.getText());        }        return t;    }    public static <T> void setField(Class<T> tClass, T t, String fieldName, Object value) throws Exception {        Field field = tClass.getDeclaredField(fieldName);        setField(t, field, value);    }    public static <T> void setField(T t, Field field, Object value) throws IllegalAccessException {        field.setAccessible(true);        field.set(t, value);    }}