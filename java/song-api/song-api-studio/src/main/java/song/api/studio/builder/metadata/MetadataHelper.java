package song.api.studio.builder.metadata;import org.dom4j.DocumentException;import song.common.db.DBType;import song.common.toolkit.xml.XMLHelper;import song.common.ui.TagNode;import java.util.HashMap;import java.util.List;import java.util.Map;/** * description: * author:          song * createDate:      2018/11/26 */public class MetadataHelper {    private static Map<DBType, List<TagNode>> map = new HashMap<>();    public static  List<TagNode> getNodes(DBType dbType) throws DocumentException {        if (!map.containsKey(dbType)) {            String path = "metadata/";            if (dbType == DBType.sqlserver) {                path += "SQLServerMetadataMapper.xml";            }            if (dbType == DBType.mysql) {                path += "MySQLMetadataMapper.xml";            }            if (dbType == DBType.oracle) {                path += "OracleMetadataMapper.xml";            }            TagNode tagNode = XMLHelper.parseTagNode(MetadataHelper.class.getClassLoader().getResource(path));            map.put(dbType, tagNode.getChildNodes());        }        return map.get(dbType);    }    public static String getSqlById(DBType dbType,String id) throws DocumentException {        List<TagNode> nodes = getNodes(dbType);        for (TagNode node : nodes) {            if (node.getAttribute("id").equals(id)) {                return node.getText();            }        }        return null;    }    public static  String getColumnsSql(DBType dbType) throws DocumentException {        return getSqlById(dbType,"getColumns");    }    public static  String getUserTableNamesSql(DBType dbType) throws DocumentException {        return getSqlById(dbType, "getUserTableNames");    }}