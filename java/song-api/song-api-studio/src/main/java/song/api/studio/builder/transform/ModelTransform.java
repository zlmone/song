package song.api.studio.builder.transform;import song.api.studio.model.Column;import song.api.studio.enums.DataType;import song.api.studio.model.Table;import song.common.db.DBType;import song.common.ui.EditorType;import song.common.util.FormatHelper;import java.util.List;/** * description: * author:          song * createDate:      2017/10/25 */public abstract class ModelTransform {    protected DBType dbType;    public DBType getDbType() {        return dbType;    }    public void setDbType(DBType dbType) {        this.dbType = dbType;    }    /**     * 将数据源结构转换为生成器模型（原始字段转换）     *     * @return     */    protected abstract List<Table> getTables();    protected abstract Table getTable(String tableName);    protected void repairColumns(Table table) {        List<Column> columns = table.getColumns();        for (Column column : columns) {            this.setDefault(column);            if (column.isPrimaryKey() || column.getField().equalsIgnoreCase(table.getPrimaryKey())) {                this.setPrimaryKey(column);            }            this.setLength(column);            this.setAlign(column);            this.setFormat(column);            this.setEditor(column);        }    }    private void setAlign(Column column) {        switch (column.getDataType()) {            case Byte:            case Int:            case Float:            case BigInt:            case Double:            case Decimal:            case SmallInt:            case Currency:                column.setAlign("right");                break;            default:                column.setAlign("center");                break;        }    }    private void setFormat(Column column) {        switch (column.getDataType()) {            case Currency:                column.setFormatString(FormatHelper.currency);                break;            case DateTime:                column.setFormatString(FormatHelper.date);                break;        }    }    private void setDefault(Column column) {        column.setEnable(true);        column.setSortable(true);        column.setHidden(false);        column.setQueryable(false);        column.setWidth(100);    }    private void setPrimaryKey(Column column) {        column.setPrimaryKey(true);        column.setHidden(true);        column.setRequired(true);    }    private boolean isNumber(DataType dataType) {        switch (dataType) {            case Int:            case Float:            case BigInt:            case Double:            case Decimal:            case SmallInt:            case Currency:                return true;        }        return false;    }    private boolean isInt(DataType dataType) {        switch (dataType) {            case Int:            case BigInt:            case SmallInt:                return true;        }        return false;    }    private void setLength(Column column) {        if (column.getDataType() != DataType.String) {            column.setLength(0);        }        int p = column.getPrecision();        column.setPrecision(p > 0 ? p : column.getLength());    }    /**     * 设置编辑器     * @param column     */    private void setEditor(Column column) {        DataType dataType = column.getDataType();        if (dataType == DataType.String) {            int len = column.getPrecision();            if (len > 50 && len < 200) {                column.setEditorType(EditorType.textboxline);            } else if (len >= 200) {                column.setEditorType(EditorType.textarea);            } else {                column.setEditorType(EditorType.textbox);            }        }        if (isNumber(dataType)) {            column.setEditorType(isInt(dataType) ? EditorType.intbox : EditorType.numberbox);        }        if (dataType == DataType.DateTime) {            column.setEditorType(EditorType.datepicker);        }        if (dataType == DataType.Boolean) {            column.setEditorType(EditorType.checkbox);        }        if (dataType == DataType.Binary) {            column.setEditorType(EditorType.upload);        }        if (dataType == DataType.Byte) {            column.setEditorType(EditorType.select);        }        if (dataType == DataType.Xml) {            column.setEditorType(EditorType.texteditor);        }    }}