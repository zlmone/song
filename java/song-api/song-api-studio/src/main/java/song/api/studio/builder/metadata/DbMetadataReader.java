package song.api.studio.builder.metadata;import song.common.db.DBColumn;import song.common.db.DBConnectionConfig;import song.common.db.DBTable;import song.common.toolkit.db.orm.DBSession;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;/** * description: * author:          song * createDate:      2017/10/25 */public class DbMetadataReader {    protected DBConnectionConfig config;    public DbMetadataReader(DBConnectionConfig config) {        this.config = config;    }    public DBSession getDbSession() throws Exception {        return new DBSession(config);    }    public void close(DBSession session) {        if (session != null) {            try {                session.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }    /**     * 获取数据库所有系统表     *     * @return     */    public List<String> getSystemTableNames() {        return null;    }    /**     * 获取数据库所有存储过程     *     * @return     */    public List<String> getProcedureNames() {        return null;    }    /**     * 获取数据库所有视图     *     * @return     */    public List<String> getViewNames() {        return null;    }    /**     * 获取数据库所有用户定义的表     *     * @return     */    public List<String> getUserTableNames() throws Exception {        DBSession dbSession = null;        try {            dbSession = this.getDbSession();            String sql = MetadataHelper.getUserTableNamesSql(config.getDbType());            return dbSession.toListString(sql, null);        } finally {            this.close(dbSession);        }    }    /**     * 获取数据库所有数据类型     *     * @return     */    public List<String> getDataTypes() {        return null;    }    /**     * 根据表名获取字段信息集合     *     * @param tableName     * @return     */    public List<DBColumn> getColumns(String tableName) throws Exception {        DBSession dbSession = null;        try {            dbSession = this.getDbSession();            String sql = MetadataHelper.getColumnsSql(config.getDbType());            List<Object> sqlParams = new ArrayList<>();            sqlParams.add(tableName);            return dbSession.toList(DBColumn.class, sql, sqlParams);        } finally {            this.close(dbSession);        }    }    public DBTable getTable(String tableName) {        DBTable table = new DBTable();        table.setCode(tableName);        table.setName(tableName);        table.setComment(tableName);        return table;    }}