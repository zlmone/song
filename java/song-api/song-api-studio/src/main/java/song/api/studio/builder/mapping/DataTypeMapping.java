package song.api.studio.builder.mapping;import song.common.db.DBType;import song.common.lang.ArrayHelper;import song.common.lang.StringHelper;import song.common.toolkit.xml.XMLHelper;import song.common.ui.TagNode;import song.common.util.ListHelper;import song.api.studio.enums.DataType;import java.net.URL;import java.util.HashMap;import java.util.List;import java.util.Map;/** * description: * author:          song * createDate:      2017/10/26 */public class DataTypeMapping {    private static TagNode mappings;    protected static TagNode getMapping() {        if (mappings == null) {            initMapping();        }        return mappings;    }    private static void initMapping() {        URL url = DataTypeMapping.class.getClassLoader().getResource("config/DataTypeMapping.xml");        try {            mappings = XMLHelper.parseTagNode(XMLHelper.readDocument(url));        } catch (Exception e) {            mappings = new TagNode();            e.printStackTrace();        }    }    private static List<TagNode> getNodes(DataType type) {        List<TagNode> nodes = getMapping().getChildNodes();        for (TagNode node : nodes) {            if (node.getAttribute("type").equalsIgnoreCase(type.name())) {                return node.getChildNodes();            }        }        return null;    }    /**     * 获取所有语言对应的数据类型（不包含数据库类型）     *     * @return     */    public static Map<String, Map<String, String>> getLangDataTypes() {        List<TagNode> nodes = getMapping().getChildNodes();        List<String> dbTypes = DBType.getNames();        Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();        for (TagNode node : nodes) {            List<TagNode> subNodes = node.getChildNodes();            if (!ListHelper.isEmpty(subNodes)) {                Map<String, String> subMap = new HashMap<String, String>();                for (TagNode subNode : subNodes) {                    String lang = subNode.getName();                    if (!dbTypes.contains(lang)) {                        subMap.put(lang, subNode.getText());                    }                }                map.put(node.getAttribute("type"), subMap);            }        }        return map;    }    /**     * 根据模型类型获取指定语言的所有数据类型     *     * @param lang     * @param type     * @return     */    public static String[] getLangDataTypes(String lang, DataType type) {        List<TagNode> nodes = getNodes(type);        if (!ListHelper.isEmpty(nodes)) {            for (TagNode node : nodes) {                //判断语言和配置节点相同                if (lang.equalsIgnoreCase(node.getName())) {                    String text = node.getText();                    if (StringHelper.isEmpty(text)) {                        text = node.getAttribute("replace");                    }                    if (!StringHelper.isEmpty(text)) {                        return text.split(",");                    }                }            }        }        return new String[]{"Object"};    }    /**     * 根据模型类型获取指定语言的第一个数据类型     *     * @param lang     * @param type     * @return     */    public static String getLangDataType(String lang, DataType type) {        return getLangDataTypes(lang, type)[0];    }    /**     * 根据原始数据类型获取模型数据类型     *     * @param lang     * @param langDataType     * @return     */    public static DataType getDataType(String lang, String langDataType) {        List<TagNode> nodes = getMapping().getChildNodes();        for (TagNode node : nodes) {            List<TagNode> childNodes = node.getChildNodes();            if (!ListHelper.isEmpty(nodes)) {                for (TagNode childNode : childNodes) {                    //判断语言相通，并且数据类型相同，则返回对应的模型类型                    if (childNode.getName().equalsIgnoreCase(lang)) {                        String replace = StringHelper.asEmpty(childNode.getAttribute("replace"));                        String text = StringHelper.asEmpty(childNode.getText());                        if (ArrayHelper.contains(langDataType, text.split(","), replace.split(","))) {                            return DataType.valueOf(node.getAttribute("type"));                        }                    }                }            }        }        return DataType.Object;    }}