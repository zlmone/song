package song.api.attachment.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import song.api.attachment.config.DownloadConfig;import song.api.attachment.config.FtpConfig;import song.common.io.FileHelper;import song.common.io.PathHelper;import song.common.net.UrlHelper;import song.common.net.http.HttpFileResponse;import song.common.toolkit.base.BaseController;import song.common.toolkit.net.ftp.FtpManager;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * description: * author:          song * createDate:      2018/1/24 */@RestController@RequestMapping("/downloader")public class DownloadController extends BaseController {    protected final static String filePathKey = "filePath";    protected final static String downloadFileNameKey = "downloadFileName";    @Autowired    private FtpConfig ftpConfig;    @Autowired    private DownloadConfig downloadConfig;    @GetMapping(value = "/server")    public void downloadServer(HttpServletRequest request, HttpServletResponse response) throws IOException {        String filePath = request.getParameter(filePathKey);        String downloadName = request.getParameter(downloadFileNameKey);        HttpFileResponse fileResponse = new HttpFileResponse(response);        fileResponse.localFile(filePath, downloadName);    }    @GetMapping(value = "/ftp")    public void downloadFtp(HttpServletRequest request, HttpServletResponse response) throws IOException {        String filePath = request.getParameter(filePathKey);        String fileName = UrlHelper.getFileName(filePath);        String downloadName = request.getParameter(downloadFileNameKey);        String localFilePath = PathHelper.combine(downloadConfig.getTempDirectory(), fileName);        //将文件下载到本地临时目录        FtpManager ftpManager = new FtpManager(ftpConfig);        try {            ftpManager.open();            ftpManager.download(filePath, localFilePath);        } finally {            ftpManager.close();        }        HttpFileResponse fileResponse = new HttpFileResponse(response);        fileResponse.localFile(localFilePath, downloadName);        //删除本地文件        FileHelper.delete(localFilePath);    }}